/* Q1: Some of the facilities charge a fee to members, but some do not.
Write a SQL query to produce a list of the names of the facilities that do. */

SELECT * FROM `Facilities` WHERE `membercost`>0

SELECT *
FROM `Facilities`
WHERE `membercost` >0
LIMIT 0 , 30



/* Q2: How many facilities do not charge a fee to members? */
SELECT COUNT( * )
FROM Facilities
WHERE `membercost` >0
# Answers 

COUNT(*)
5


/* Q3: Write an SQL query to show a list of facilities that charge a fee to members,
where the fee is less than 20% of the facility's monthly maintenance cost.
Return the facid, facility name, member cost, and monthly maintenance of the
facilities in question. */

SELECT `facid` , `name` , `membercost` , `monthlymaintenance`
FROM Facilities
WHERE `membercost` < 0.2 * `monthlymaintenance`
LIMIT 0 , 30

Answers 


	
Edit Edit
Copy Copy
Delete Delete
0
Tennis Court 1
5.0
200

Edit Edit
Copy Copy
Delete Delete
1
Tennis Court 2
5.0
200

Edit Edit
Copy Copy
Delete Delete
2
Badminton Court
0.0
50

Edit Edit
Copy Copy
Delete Delete
3
Table Tennis
0.0
10

Edit Edit
Copy Copy
Delete Delete
4
Massage Room 1
9.9
3000

Edit Edit
Copy Copy
Delete Delete
5
Massage Room 2
9.9
3000

Edit Edit
Copy Copy
Delete Delete
6
Squash Court
3.5
80

Edit Edit
Copy Copy
Delete Delete
7
Snooker Table
0.0
15

Edit Edit
Copy Copy
Delete Delete
8
Pool Table
0.0
15

/* Q4: Write an SQL query to retrieve the details of facilities with ID 1 and 5.
Try writing the query without using the OR operator. */

SELECT * FROM `Facilities` WHERE `facid` = 1 AND `facid` = 5


/* Q5: Produce a list of facilities, with each labelled as
'cheap' or 'expensive', depending on if their monthly maintenance cost is
more than $100. Return the name and monthly maintenance of the facilities
in question. */

SELECT *
FROM Facilities
WHERE facid
IN ( 1, 2, 3, 4, 5 )
LIMIT 0 , 30
/* Q6: You'd like to get the first and last name of the last member(s)
who signed up. Try not to use the LIMIT clause for your solution. */

SELECT firstname, surname
FROM Members
ORDER BY joindate DESC

/* Q7: Produce a list of all members who have used a tennis court.
Include in your output the name of the court, and the name of the member
formatted as a single column. Ensure no duplicate data, and order by
the member name. */

SELECT distinct(concat(surname, firstname)) as Members_Name, name
FROM Members as m
	INNER Join Bookings as b
		On m.memid = b.memid
	Inner Join Facilities as f
		On f.facid = b.facid
	WHERE name like 'Tennis%'
ORDER BY Members_name DESC;



/* Q8: Produce a list of bookings on the day of 2012-09-14 which
will cost the member (or guest) more than $30. Remember that guests have
different costs to members (the listed costs are per half-hour 'slot'), and
the guest user's ID is always 0. Include in your output the name of the
facility, the name of the member formatted as a single column, and the cost.
Order by descending cost, and do not use any subqueries. */

SELECT name, concat(surname,' ', firstname) as Members_name, cost
FROM Bookings as b
CASE WHEN b.memid = 0 THEN guestcost*slots
ELSE membercost*slots
END AS cost
INNER JOIN Facilities as f
	ON f.facid = m.facid
INNER JOin Members as m
	ON m.memid = b.memid
WHERE starttime = '2012-09-14%' AND  cost> 30
ORDER BY cost;

/* Q9: This time, produce the same result as in Q8, but using a subquery. */

SELECT *
FROM (
SELECT name, CONCAT( firstname, ' ', surname ) AS Members_name,
CASE WHEN b.memid =0
THEN guestcost * slots
ELSE membercost * slots
END AS cost
FROM Bookings AS b
INNER JOIN Facilities AS f ON b.facid = f.facid
AND starttime LIKE '2012-09-14%'
INNER JOIN Members AS m ON b.memid = m.memid
)sub
WHERE sub.cost >30
ORDER BY sub.cost


/* PART 2: SQLite
/* We now want you to jump over to a local instance of the database on your machine. 
Copy and paste the LocalSQLConnection.py script into an empty Jupyter notebook, and run it. 
Make sure that the SQLFiles folder containing thes files is in your working directory, and
that you haven't changed the name of the .db file from 'sqlite\db\pythonsqlite'.
You should see the output from the initial query 'SELECT * FROM FACILITIES'.
Complete the remaining tasks in the Jupyter interface. If you struggle, feel free to go back
to the PHPMyAdmin interface as and when you need to. 
You'll need to paste your query into value of the 'query1' variable and run the code block again to get an output.
 
QUESTIONS:
/* Q10: Produce a list of facilities with a total revenue less than 1000.
The output of facility name and total revenue, sorted by revenue. Remember
that there's a different cost for guests and members! */

SELECT * 
FROM (
SELECT name, SUM(sub.cost) AS total_revenue
FROM (
SELECT name, 
CASE WHEN b.memid =0
THEN guestcost * slots
ELSE membercost * slots
END AS cost
FROM Bookings as b
INNER JOIN Facilities as f ON b.facid = f.facid
INNER JOIN Members as m ON b.memid = m.memid
)sub
GROUP BY name
)sub2
WHERE sub2.total_revenue <1000

/* Q11: Produce a report of members and who recommended them in alphabetic surname,firstname order */



/* Q12: Find the facilities with their usage by member, but not guests */


/* Q13: Find the facilities usage by month, but not guests */
SELECT f.name, (EXTRACT(MONTH FROM b.starttime)) as month_count, count(*) as usage_count
FROM Facilities as f
INNER JOIN Bookings as b
on b.facid = f.facid
where b.memid != 0
group by f.name, month_count;
